body {
  -webkit-font-smoothing: antialiased;
  -moz-osx-font-smoothing: grayscale;
  font-weight: 400;
}

.body-text {
  box-sizing: border-box;
  padding: 60px;
}

.has-hero {
  background-size: cover;
  background-position: 80% 0;
}

@media screen and (min-width: 992px) {
  .has-hero {
    min-height: 100vh;
  }
}

blockquote {
  letter-spacing: 0.75px;
  padding: 10px 0;
}

.text-color-black,
.text-color-gray {
  color: #0c1204;
}

.text-color-black a,
.text-color-gray a {
  color: #0c1204;
}

.text-color-white {
  color: #fff;
}

.text-color-white a {
  color: #fff;
}

.text-color-gold {
  color: #775a22;
}

.text-color-gold a {
  color: #775a22;
}

.border-color-gold {
  border-color: #775a22;
}

.avatar-wrapper .avatar {
  display: inline;
}

.no-padding {
  padding: 0 !important;
}

.col-right {
  padding-right: 60px;
}

@media screen and (max-width: 768px) {
  .col-right {
    padding-right: 13px;
  }
}

.col-left {
  padding-left: 60px;
}

@media screen and (max-width: 768px) {
  .col-left {
    padding-left: 13px;
  }
}

.row-flex:after, .row-flex:before {
  content: " ";
  display: block;
}

@media screen and (min-width: 768px) {
  .row-flex {
    display: -ms-flexbox;
    display: flex;
    -ms-flex-direction: row;
        flex-direction: row;
  }
}

.row-flex .col-sm-1,
.row-flex .col-sm-10,
.row-flex .col-sm-11,
.row-flex .col-sm-2,
.row-flex .col-sm-3,
.row-flex .col-sm-4,
.row-flex .col-sm-5,
.row-flex .col-sm-6,
.row-flex .col-sm-7,
.row-flex .col-sm-8,
.row-flex .col-sm-9 {
  -ms-flex-align: baseline;
      align-items: baseline;
}

.copyright {
  font-size: 16px;
  color: #9B9B9B;
  letter-spacing: 1.33px;
  text-align: center;
}

.copyright .para {
  margin: 0;
}

.footer-logo {
  max-width: 320px;
  margin: 0 auto 20px;
}

.first-letter::first-letter {
  float: left;
  font-size: 170px;
  line-height: 140px;
  color: #4A4A4A;
}

.first-letter.first-letter-gold::first-letter {
  color: #775a22;
}

.first-letter.first-letter-white::first-letter {
  color: #ffffff;
}

.header-top,
h2 {
  font-family: "TheanoDidot-Bold";
  font-size: 26px;
  letter-spacing: 2.17px;
}

#footer .footer-menu a {
  color: #775a22;
}

@media screen and (max-width: 768px) {
  #footer .brand-logo {
    max-width: 200px;
    margin-top: 40px;
  }
}

#footer .copyright a {
  color: #9B9B9B;
  text-decoration: underline;
}

@media screen and (max-width: 768px) {
  #footer .subscribe-goodies {
    margin: 40px auto 0;
    float: none;
    max-width: 600px;
  }
}

#footer .subscribe-goodies .subscribe-goodies-row-1,
#footer .subscribe-goodies .subscribe-goodies-row-2 {
  float: right;
}

@media screen and (max-width: 768px) {
  #footer .subscribe-goodies .subscribe-goodies-row-1 {
    margin-top: 0;
    position: absolute !important;
    bottom: 240px;
    right: 20px;
  }
}

#footer .subscribe-goodies .buttons .button-white {
  line-height: 16px;
  color: #775a22;
  border: solid 1px #775a22;
  background-color: #ffffff;
  font-family: "TheanoDidot-Regular", Georgia, "Times New Roman", Times, serif;
  font-size: 16px;
  font-style: italic;
  padding: 6px 15px;
}

@media screen and (max-width: 768px) {
  #footer .subscribe-goodies .buttons .button-white {
    float: right;
  }
}

#footer .subscribe-goodies .buttons .button-gold {
  line-height: 16px;
  font-family: "avenirnext-regular", Helvetica, Arial, sans-serif;
  font-size: 14px;
  text-transform: uppercase;
  border: none;
  color: #ffffff;
  background-color: #775a22;
  padding: 6px 5px;
  margin-left: 20px;
}

@media screen and (max-width: 768px) {
  #footer .subscribe-goodies .buttons .button-gold {
    margin-left: 0;
  }
}

@media screen and (min-width: 1200px) {
  #footer .subscribe-goodies .buttons .button-white {
    font-size: 20px;
    line-height: 20px;
  }
  #footer .subscribe-goodies .buttons .button-gold {
    font-size: 18px;
    line-height: 20px;
  }
}

#footer .subscribe-goodies .soc-med-icons {
  margin-top: 19px;
  display: block;
  padding-right: 0;
}

@media screen and (max-width: 768px) {
  #footer .subscribe-goodies .soc-med-icons {
    margin-top: 0;
    position: absolute !important;
    bottom: 170px;
    right: 0;
  }
}

#footer .subscribe-goodies .soc-med-icons a i {
  color: #775a22;
  font-size: 35px;
  padding: 0 8px;
}

@media screen and (max-width: 480px) {
  #footer .subscribe-goodies .soc-med-icons a i {
    font-size: 25px;
  }
}

.navbar-brand {
  padding-top: 50px;
  height: auto;
}

.navbar {
  margin-bottom: 0;
}

.navbar-nav {
  margin: 9.75px 0;
}

#topics-menu {
  font-size: 0;
  margin: 0 auto;
  text-align: justify;
  width: 100%;
  float: none;
}

#topics-menu .dropdown {
  float: none;
  font-size: 14px;
  line-height: 1em;
  display: inline-block !important;
}

#topics-menu .dropdown-toggle {
  color: #775a22;
  text-transform: uppercase;
}

.navbar-section .navbar-container {
  width: 100%;
}

@media screen and (max-width: 768px) {
  .navbar-section .navbar-container {
    padding: 40px;
  }
}

.navbar-section .navbar-container .navbar-column {
  width: 100%;
}

.navbar-section .navbar-container .navbar-column .brand-logo .navbar-brand-img {
  float: none;
  margin: 0 auto;
  display: block;
  width: 279px;
}

@media screen and (max-width: 768px) {
  .navbar-section .navbar-container .navbar-column .brand-logo .navbar-brand-img {
    width: 150px;
  }
}

.navbar-default {
  background-color: transparent;
}

.navbar-sticky {
  position: absolute !important;
  width: 100%;
  z-index: 10000;
}

.hamburger-gold .icon-bar {
  background-color: #775a22 !important;
}

.hamburger-gold .menu-label {
  color: #775a22;
}

.hamburger-white .icon-bar {
  background-color: #ffffff !important;
}

.hamburger-white .menu-label {
  color: #ffffff;
}

.navbar-toggle {
  border: 0;
  float: none;
  display: block;
}

@media (max-width: 768px) {
  .navbar-toggle {
    margin-top: 0;
  }
}

.navbar-toggle .icon-bar {
  height: 3px;
  width: 45px;
  position: absolute;
  margin-top: 0;
  top: 0;
  transition: -webkit-transform 0.5s ease;
  transition: transform 0.5s ease;
}

.navbar-toggle .icon-bar-top {
  -webkit-transform: rotate(-45deg);
          transform: rotate(-45deg);
  width: 35px;
  top: 74px;
}

@media (max-width: 768px) {
  .navbar-toggle .icon-bar-top {
    width: 22px;
  }
}

.navbar-toggle .icon-bar-bottom {
  -webkit-transform: rotate(45deg);
          transform: rotate(45deg);
  width: 35px;
  top: 70px;
}

@media (max-width: 768px) {
  .navbar-toggle .icon-bar-bottom {
    width: 22px;
  }
}

.navbar-toggle.collapsed .icon-bar {
  position: relative;
  -webkit-transform: none;
          transform: none;
  display: block;
  top: 0;
}

.navbar-collapse {
  box-sizing: border-box;
  padding: 30px;
}

.navbar-collapse.collapsing, .navbar-collapse.in {
  padding: 20px 25px 20px 50px;
  background: #fff;
  border: 1px solid #775a22;
}

.hamburger-menu {
  left: 20px;
  position: absolute;
  top: 16px;
  z-index: 100;
  text-transform: uppercase;
  letter-spacing: 1px;
}

@media (max-width: 768px) {
  .hamburger-menu {
    left: 10px;
  }
}

.hamburger-helper {
  margin-top: -20px;
}

.menu-label {
  font-size: 12px;
}

@media screen and (max-width: 768px) {
  .menu-label {
    font-size: 7px;
  }
}

#main-menu {
  float: none;
  display: none;
}

#main-menu a {
  color: #775a22;
  padding: 5px;
  letter-spacing: 1px;
}

#main-menu > li {
  list-style: none;
  float: none;
}

@media (min-width: 768px) {
  #main-menu::after {
    display: inline-block;
    width: 100%;
  }
}

#navbar-collapse.in #main-menu {
  display: block;
}

#footer-menu {
  line-height: 11px;
}

.copyright {
  font-size: 16px;
}

@media screen and (max-width: 768px) {
  .copyright {
    font-size: 10px;
  }
}

.article {
  text-align: justify;
}

@media screen and (min-width: 768px) {
  .article {
    font-size: 18pt;
  }
}

.article-meta {
  line-height: 35px;
  letter-spacing: 0.27px;
  font-weight: lighter;
  font-size: 20px;
}

@media screen and (max-width: 479px) {
  .article-meta {
    font-size: 15px;
    line-height: 1.5em;
  }
}

.article-meta .article-header {
  margin-top: 20px;
}

.article-intro-border {
  border-width: 3px;
}

.article-category {
  border: 0.5px solid #0c1204;
  color: #0c1204;
  display: inline-block;
  font-size: 14px;
  line-height: 1em;
  padding: 10px;
}

.article-category:hover {
  background-color: #775a22;
  color: #fff;
  text-decoration: none;
}

@media screen and (max-width: 479px) {
  .article-category {
    padding: 8px;
  }
}

.article-category.text-color-white {
  border-color: #ffffff;
  color: #ffffff;
}

.article-category.text-color-white:hover {
  background-color: #ffffff;
  color: #775a22;
}

.article-category.text-color-gold {
  border-color: #775a22;
  color: #775a22;
}

.article-category.text-color-gold:hover {
  background-color: #775a22;
  color: #fff;
}

.article-byline {
  min-height: 93px;
  padding-top: 39px;
  padding-bottom: 39px;
}

.pull-right .date-published {
  color: #9B9B9B;
}

.contributor-link {
  color: #0c1204;
}

.contributor-link:hover {
  color: #3c4137;
}

.list-inline {
  margin-left: 0;
}

.contributor-list .contributor-role {
  text-transform: uppercase;
  color: #9B9B9B;
}

.contributor-list .contributor-credit {
  text-transform: uppercase;
}

.contributor-list .avatar .img-responsive {
  display: inline;
}

.contributor-list .list-item {
  padding: 0 0.5em 0 0 !important;
}

.contributor-list .contributor-link {
  color: #775a22;
  text-decoration: underline;
}

.contributor {
  display: -ms-flexbox;
  display: flex;
  -ms-flex-direction: row;
      flex-direction: row;
}

.contributor .avatar-wrapper {
  margin-right: 10px;
}

.date-published {
  color: #9B9B9B;
}

.col-left {
  padding-right: 60px;
}

@media screen and (max-width: 768px) {
  .col-left {
    padding-right: 13px;
  }
}

.col-right {
  padding-left: 60px;
}

@media screen and (max-width: 768px) {
  .col-right {
    padding-left: 13px;
  }
}

.particle-text {
  letter-spacing: 0.22px;
  font-size: 16px;
  line-height: 35px;
  -webkit-hyphens: auto;
     -moz-hyphens: auto;
      -ms-hyphens: auto;
          hyphens: auto;
}

.particle-pullquote blockquote,
.particle-pullquote q {
  font-size: 42px;
  font-family: "TheanoDidot-Bold", Georgia, "Times New Roman", Times, serif;
  letter-spacing: 0.75px;
  line-height: 53px;
  quotes: "\201C" "\201D" "\2018" "\2019";
  text-align: left;
}

.particle-pullquote blockquote::before,
.particle-pullquote q::before {
  content: open-quote;
}

@media screen and (min-width: 768px) {
  .particle-pullquote blockquote.hangingindent::before,
  .particle-pullquote q.hangingindent::before {
    margin-left: -26px;
  }
}

.particle-pullquote blockquote::after,
.particle-pullquote q::after {
  content: close-quote;
}

.particle-image {
  position: relative;
}

.credit-container .particle-text,
.credit-container .photo-credits {
  line-height: 22px;
  font-size: 14px;
}

@media screen and (min-width: 768px) {
  .credit-container .particle-text,
  .credit-container .photo-credits {
    max-width: 200px;
  }
}

.credit-container .particle-text div:first-child,
.credit-container .photo-credits div:first-child {
  margin-bottom: 1rem;
}

.credit-container .particle-text a,
.credit-container .photo-credits a {
  text-decoration: underline;
}

.text-bottom-left,
.text-bottom-right,
.text-top-left,
.text-top-right {
  position: absolute;
}

.text-top-left {
  left: 30px;
  top: 30px;
}

.text-bottom-left {
  left: 30px;
  bottom: 30px;
}

.text-top-right {
  right: 30px;
  top: 30px;
  text-align: right;
}

.text-bottom-right {
  right: 30px;
  bottom: 30px;
  text-align: right;
}

/*# sourceMappingURL=data:application/json;charset=utf8;base64, */
